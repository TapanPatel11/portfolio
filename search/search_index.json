{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u2601\ufe0f Welcome to My Cloud Universe \ud83d\ude80","text":""},{"location":"#hey-im-tapan-patel","title":"\ud83d\udc4b Hey, I'm Tapan Patel","text":"<p>A DevOps Engineer with 5 years of expertise in building secure, scalable, and resilient cloud and on-premise infrastructure. I specialize in DevOps methodologies, CI/CD automation, and system reliability, ensuring high availability across multi-cloud environments (AWS, Azure, GCP).  </p> <p>\ud83d\udd39 Optimizing Deployment Pipelines \u2192 Faster releases, improved security \ud83d\udd39 Infrastructure Automation \u2192 Scalable &amp; self-healing cloud solutions \ud83d\udd39 Containerization &amp; Configuration Management \u2192 Docker, Kubernetes, Terraform  </p> <p>\ud83d\ude80 I turn complex challenges into scalable solutions with automation-first approaches.  </p> <p>Welcome to my Digital Resume</p> <p>This site is more than just a portfolio\u2014it's a demonstration of my skills in action. Built entirely with MkDocs, it showcases not only my expertise in documentation but also my ability to design and deploy professional-grade static sites. Dive in to explore my journey, skills, and projects!</p> Explore my journey <ul> <li> <p> Work Experiences</p> <p>Check out where I worked previously!</p> <p> Past Experiences </p> </li> <li> <p> Education</p> <p>Check out where I studied!</p> <p> Past Eduction </p> </li> <li> <p> Skills</p> <p>Check out my awesome skills!</p> <p> Skills</p> </li> <li> <p> Achievements</p> <p>Checkout my achievements! </p> <p> Achievements</p> </li> </ul> <p> </p>"},{"location":"#lets-connect","title":"\ud83d\udcec Let\u2019s Connect!","text":"<p>\u2728 Cloud is my playground, automation is my superpower! \ud83d\udca1 \ud83d\ude80 Let\u2019s build something amazing together! </p>"},{"location":"about/","title":"About Me","text":"<p>Welcome to my portfolio!</p> <p>I\u2019m Tapan Patel, a dedicated DevOps Engineer with over 5 years of experience crafting secure, scalable, and resilient cloud and on-premise infrastructures.</p> <p>This site is more than just a portfolio\u2014it's a demonstration of my skills in action. Built entirely with MkDocs, it showcases not only my expertise in documentation but also my ability to design and deploy professional-grade static sites. Dive in to explore my journey, skills, and projects!</p> Explore my journey <ul> <li> <p> Work Experiences</p> <p>Check out where I worked previously!</p> <p> Past Experiences </p> </li> <li> <p> Education</p> <p>Check out where I studied!</p> <p> Past Eduction </p> </li> <li> <p> Skills</p> <p>Check out my awesome skills!</p> <p> Skills</p> </li> <li> <p> Achievements</p> <p>Checkout my achievements! </p> <p> Achievements</p> </li> </ul> <p> </p>"},{"location":"about/achievements/","title":"Achievements","text":"<p>AWS Certified</p><p>Developer \u2013 Associate</p> <p>AWS Certified</p><p>Solutions Architect \u2013 Associate</p> <p>Microsoft Certified</p><p>DevOps Engineer Expert</p> <p>Microsoft Certified</p><p>AZ-400 - Designing and Implementing Microsoft DevOps Solutions</p> <p>Microsoft Certified</p><p>AZ-200 - Azure Developer Associate</p> <p>Microsoft Certified</p><p>AZ-900 - Azure Fundamentals</p>"},{"location":"about/education/","title":"\ud83c\udf93 Education","text":"<p>DevOps Engineer | Routeware Inc</p> Jan 2024 - Nov 2024<p>- Position: DevOps Engineer at Routeware Inc. </p> <p>Master's in Applied Computer Science</p> 2022 - 2024<p>- Advanced Cloud Architecture - Advanced Cloud Computing - Network Security - Web Development - Serverless Data Processing - Mobile Computing - Data Management &amp; Warehousing </p> <p>Software Engineer | Accenture Inc</p> Jun 2019 - Jul 2022<p>- Position: Software Engineer at Accenture Inc. </p> <p>Bachelor's in Computer Engineering</p> 2015 - 2019<p>- Object-Oriented Programming in Python - Data Structures - Web Technologies - Analysis and Design of Algorithms - Database Management Systems - Software Engineering</p>"},{"location":"about/experiences/","title":"\ud83c\udfc6 Experience","text":"<p>DevOps Engineer | Routeware</p> Jan 2024 - Nov 2024<p>- \ud83d\ude80 90% Faster Deployments \u2192 Automated Terraform deployments via Atlantis on Azure Container App. - \ud83d\udd12 Secure Cloud Environments \u2192 Managed Application Gateway, WAF, NSG rules for robust security. - \ud83c\udf10 Optimized Connectivity \u2192 Configured route tables, security policies, health checks, private endpoints. - \u2699\ufe0f CI/CD Automation \u2192 Built GitHub Actions &amp; Azure DevOps pipelines for ACS container deployments. - \ud83d\udee1 Twingate Infrastructure \u2192 Automated access management &amp; networking with Terraform. - \ud83c\udfd7 Infrastructure as Code (IaC) \u2192 Created Terraform modules for AWS &amp; Azure resources. - \ud83d\udcc8 Centralized Logging \u2192 Deployed Mezmo &amp; Fluent Bit using Ansible &amp; Shell scripts. - \ud83d\udea8 Incident Response \u2192 Integrated Datadog &amp; Azure Logic Apps, routing alerts to Slack. - \ud83d\udcd6 Documentation Standardization \u2192 Established MkDocs for structured technical documentation. </p> <p>Master's in Applied Computer Science</p> Sep 2022 - May 2024<p>- Specialized in Cloud Computing, DevOps, and Infrastructure Automation. </p> <p>Software Engineer | Accenture</p> June 2019 - July 2022<p>- \u26a1 Minimized Downtime \u2192 Enhanced SSIS ETL with robust error handling. - \u2601 Cloud Automation \u2192 Developed event-driven Java Spring Boot services using AWS S3, Lambda, DynamoDB Streams. - \ud83d\udce9 AWS Messaging Integration \u2192 Built SNS &amp; SQS-based notification systems. - \ud83c\udfd7 Kubernetes &amp; Terraform \u2192 Provisioned K8s clusters &amp; AWS/Azure infrastructure. - \ud83d\udd04 CI/CD Optimization \u2192 Designed multi-stage Azure DevOps pipelines. - \ud83d\udcca ETL &amp; Data Processing \u2192 Engineered solutions using AWS Glue, Azure Cosmos DB, SharePoint. - \ud83e\udd16 Process Automation \u2192 Reduced 92% manual tasks via C# scripting. - \ud83d\udd01 Agile &amp; DevOps Best Practices \u2192 Integrated Scrum &amp; CI/CD methodologies. </p> <p>Bachelor's in Computer Engineering</p> Aug 2015 - Mar 2019<p>- Focused on Software Development, Cloud Technologies, and Data Structures.</p>"},{"location":"about/skills/","title":"Skills","text":"<p>Keep Moving</p> <p>The skills listed below are just the major ones and will continue to grow as I move forward. I don't have a single \"strong zone\" because I believe in not restricting myself to one skill. My journey is about continuous exploration and expanding my domain knowledge, embracing every opportunity to learn and adapt.</p>"},{"location":"about/skills/#tracking-management","title":"Tracking &amp; Management","text":"<ul> <li> JIRA</li> <li> Azure Boards</li> <li> Confluence</li> <li> MkDocs</li> </ul>"},{"location":"about/skills/#programming","title":"Programming","text":"<ul> <li> JAVA</li> <li> Python </li> <li> JavaScript </li> <li> C#</li> <li> </li> <li>C++</li> <li> Bash</li> <li> Linux</li> </ul>"},{"location":"about/skills/#cloud-services","title":"Cloud Services","text":"<ul> <li> AWS</li> <li> AZURE</li> <li> GCP</li> </ul>"},{"location":"about/skills/#cicd-tools","title":"CI/CD Tools","text":"<ul> <li> GitHub Actions</li> <li> Azure DevOps</li> <li> GitLab CI/CD</li> </ul>"},{"location":"about/skills/#iac-tools","title":"IaC Tools","text":"<ul> <li> Terraform</li> <li> Ansible</li> </ul>"},{"location":"about/skills/#containers","title":"Containers","text":"<ul> <li> Docker</li> <li> Kubernetes</li> <li> Powershell</li> </ul>"},{"location":"about/skills/#logging-monitoring","title":"Logging &amp; Monitoring","text":"<ul> <li> DataDog</li> <li> FluentBit</li> <li> Mezmo</li> <li> SigNoz</li> </ul>"},{"location":"about/skills/#databases","title":"Databases","text":"<ul> <li> SQL</li> <li> NoSQL</li> <li> PostgresSQL</li> </ul>"},{"location":"projects/","title":"Explore my Projects","text":"<p>Coming Soon</p> <p>This page is still under construction as I\u2019m in the process of adding some cool projects. Stay tuned for updates!</p>"},{"location":"projects/#cloud-projects","title":"Cloud Projects","text":"<p>Atlantis</p><p>Terraform Automation Tool implemented using AWS ECS</p> <p>ArgoCD</p><p>Deploy ArgoCD on AWS EKS/ELB</p> <p>Anime Sage</p><p>See this cool project</p> <p>iOS Development</p><p>Cool iOS AR Projects</p> <p>Coming Soon</p> <p>Cool Project Loading Soon</p> <p>Coming Soon</p> <p>Cool Project Loading Soon</p>"},{"location":"projects/animesage/","title":"AnimeSage","text":"<p>What's AnimeSage?</p> <p>AnimeSage is a sleek, intuitive anime recommendation app designed for anime enthusiasts looking to discover new titles based on their preferences. Whether you're a seasoned otaku or a newbie, AnimeSage helps you find your next anime series easily with personalized recommendations. AnimeSage is not just another anime app. It\u2019s a personalized experience that leverages the power of AWS to deliver fast, secure, and scalable anime recommendations. Whether you're looking for the next big series or a hidden gem, AnimeSage will help you find it.</p>"},{"location":"projects/animesage/#features","title":"Features","text":"Why AnimeSage? <ul> <li> <p> Personalized Recommendations Filter through a vast library of anime based on your preferences such as Aired date, Episodes, Popularity, Score, Ranked, and Genres.</p> </li> <li> <p> Dynamically Populated Genres Access the most up-to-date genres dynamically sourced from the database.</p> </li> <li> <p> Email Integration Get detailed information about any anime directly in your inbox with a single click.</p> </li> <li> <p> Visually Appealing Interface Enjoy an interactive UI with cards and grids to quickly scan and find anime that match your tastes.</p> </li> <li> <p> AWS-Powered Backend Built on AWS services like Lambda, DynamoDB, SNS, and SQS, ensuring scalability, security, and high availability.</p> </li> </ul>"},{"location":"projects/animesage/#architecture","title":"Architecture","text":"<p>Serverless architecture</p> <p>AnimeSage utilizes a serverless architecture for optimal performance, cost-effectiveness, and scalability, powered by AWS.</p> <p></p>"},{"location":"projects/animesage/#aws-services-used","title":"AWS Services Used","text":"Service Purpose AWS Lambda Stateless API requests and data processing AWS EC2 Hosting the frontend React app AWS DynamoDB NoSQL database for storing and querying anime data AWS SNS Sending notifications and anime details via email AWS SQS Decoupling components for asynchronous messaging AWS VPC Secure networking between services AWS Elastic Load Balancer Balancing traffic for high availability AWS Internet Gateway Enabling internet connectivity for EC2 instances and other resources in VPC AWS API Gateway Creating and managing RESTful APIs for Lambda functions AWS Security Groups Controlling inbound and outbound traffic to EC2 instances and other services"},{"location":"projects/animesage/#deployment-model","title":"Deployment Model","text":"<p>The app leverages the public cloud deployment model, ensuring that all services are hosted and managed in the cloud, making AnimeSage globally accessible, cost-effective, and scalable.</p>"},{"location":"projects/animesage/#user-flow","title":"User Flow","text":"<ol> <li>User Input: The user inputs preferences such as genres, scores, and aired dates.</li> <li>Backend Processing: AWS Lambda processes these inputs and queries the DynamoDB database.</li> <li>Anime Recommendations: The system presents personalized anime recommendations in cards and grids.</li> <li>Email Integration: Users can email themselves the anime details with a click of a button.</li> </ol>"},{"location":"projects/animesage/#security-features","title":"Security Features","text":"<ul> <li>SSL/TLS Encryption: Ensures that all data exchanged between frontend and backend is securely transmitted.</li> <li>DynamoDB Encryption: All stored data is encrypted at rest, using AWS-managed keys for added security.</li> <li>IAM Policies: Restrict access to resources, adhering to the principle of least privilege.</li> </ul>"},{"location":"projects/animesage/#cost-analysis","title":"Cost Analysis","text":""},{"location":"projects/animesage/#upfront-costs","title":"Upfront Costs","text":"<ul> <li>AWS Resources: EC2 instances, Lambda functions, DynamoDB, SNS, and SQS.</li> <li>Domain and SSL Certificates: For securing the web application.</li> </ul>"},{"location":"projects/animesage/#ongoing-operational-costs","title":"Ongoing Operational Costs","text":"Service Cost Type Lambda Pay-as-you-go based on requests and compute time DynamoDB Based on read/write capacity units SNS &amp; SQS Based on the number of messages"},{"location":"projects/animesage/#get-started","title":"Get Started","text":"<p>Live coming soon!</p> <p>The app will be hosted and will be alive soom, so stay tuned!</p> <ul> <li>Visit the app at AnimeSage</li> <li>Enter your anime preferences and receive personalized recommendations!</li> <li>Sign up to receive anime details via email.</li> </ul>"},{"location":"projects/animesage/#technologies-used","title":"Technologies Used","text":"<ul> <li>Frontend: React</li> <li>Backend: Node.js (Lambda Functions)</li> <li>Database: AWS DynamoDB</li> <li>Email: AWS SNS and SQS</li> <li>Cloud Infrastructure: AWS (Lambda, EC2, DynamoDB, SNS, SQS, VPC)</li> </ul>"},{"location":"projects/animesage/#installation-and-setup","title":"Installation and Setup","text":"<p>Try it out!</p> <p>Follow the steps to run it locally!</p> <ol> <li> <p>Clone the repository: <code>git clone https://github.com/your-username/animesage.git</code></p> </li> <li> <p>Set up the environment:    Install dependencies via <code>npm install</code> for React and set up AWS CLI for backend services.</p> </li> <li> <p>Deploy to AWS:    Use AWS CLI or AWS CloudFormation to set up resources. Make sure to configure API Gateway, Lambda, DynamoDB, and SNS.</p> </li> <li> <p>Run the Application:    Once everything is set up, run <code>npm start</code> to start the React app locally.</p> </li> </ol>"},{"location":"projects/animesage/#contributing","title":"Contributing","text":"<p>We welcome contributions to AnimeSage! Please fork the repository, create a feature branch, and submit a pull request.</p>"},{"location":"projects/animesage/#contact","title":"Contact","text":"<p>Any doubts?</p> <p>Feel free to reach out if you have any suggestions, doubt's or wish to know more! Thanks!</p>"},{"location":"projects/argocd/","title":"ArgoCD","text":"<p>What's ArgoCD?</p> <p>ArgoCD is a declarative, GitOps continuous delivery tool for Kubernetes. This document outlines the infrastructure provisioning, architecture, and deployment details of ArgoCD hosted on an AWS EKS cluster using Terraform.</p> <p>To demonstrate my ability and understanding of Kubernetes infrastructure, I developed custom Terraform modules for VPC and EKS cluster provisioning instead of relying on pre-built modules. This approach allows for full control, flexibility, and a deeper grasp of the infrastructure. Read more..</p> <p>Why Custom Modules?</p> <p>While there are ready-to-go Terraform modules available for AWS VPC and EKS, I chose to create my own modules to showcase my proficiency in Terraform, Kubernetes, and AWS infrastructure.</p> <p>Developing these custom modules enabled me to: - Gain greater control over resource configuration. - Demonstrate my ability to design scalable, secure, and modular infrastructure. - Troubleshoot effectively and understand the internals of AWS VPC and EKS.</p>"},{"location":"projects/argocd/#features","title":"Features","text":"Why use ArgoCD on EKS? <ul> <li> GitOps Workflow   Automates application deployments using declarative Git-based workflows.</li> <li> Highly Available Infrastructure   Provisions an EKS cluster across multiple availability zones using a custom VPC.</li> <li> Custom Terraform Modules   Demonstrates expertise in writing reusable infrastructure modules.</li> <li> Scalable Design   Supports managed node groups with auto-scaling capabilities.</li> <li> Secure Networking   Implements secure VPC, private/public subnets, and NAT Gateways.</li> <li> Add-ons Installation   Integrates critical EKS add-ons such as:<ul> <li>CoreDNS</li> <li>AWS VPC CNI</li> <li>Kube Proxy</li> <li>EBS CSI Driver</li> </ul> </li> </ul>"},{"location":"projects/argocd/#argocd-walkthrough","title":"ArgoCD Walkthrough","text":""},{"location":"projects/argocd/#custom-eks-deployment-demo","title":"Custom EKS Deployment Demo","text":"<p>To see the infrastructure in action, visit my Terraform repository showcasing the deployment of ArgoCD: EKS Infrastructure Deployment</p>"},{"location":"projects/argocd/#argocd-ui","title":"ArgoCD UI","text":"<p>The ArgoCD admin UI is exposed securely via Load balancer, providing visibility into application synchronization and deployments.</p>"},{"location":"projects/argocd/#architecture","title":"Architecture","text":"<p>Modular Infrastructure</p> <p>The infrastructure follows a modular design with custom Terraform modules for: - VPC: To create the network topology (subnets, NAT Gateway, route tables, etc.). - EKS: To provision the Kubernetes cluster with managed node groups and add-ons.</p> <p>Architecture Diagram</p> <p>Coming soon...  </p>"},{"location":"projects/argocd/#aws-services-used","title":"AWS Services Used","text":"Service Purpose AWS VPC Creates a secure, isolated network for EKS. AWS Subnets Divides network into public and private subnets. AWS NAT Gateway Enables outbound internet access for private subnets. AWS EKS Hosts the Kubernetes cluster for ArgoCD. AWS IAM Roles Provides access control for EKS nodes and services. AWS Security Groups Controls inbound/outbound traffic for cluster security. Elastic Block Storage (EBS) Provides persistent storage for EKS workloads."},{"location":"projects/argocd/#deployment","title":"Deployment","text":""},{"location":"projects/argocd/#deployment-workflow","title":"Deployment Workflow","text":"<ol> <li> <p>Clone the Repository    Clone the Terraform repository containing the VPC and EKS custom modules:    <pre><code>git clone https://github.com/tapanpatel11/terraform.git\ncd terraform\n</code></pre></p> </li> <li> <p>Provision the VPC    Navigate to the VPC module directory and apply the Terraform configuration:    <pre><code>cd modules/vpc\nterraform init\nterraform apply\n</code></pre></p> </li> <li> <p>Provision the EKS Cluster    Navigate to the EKS module directory and apply the Terraform configuration:    <pre><code>cd ../eks\nterraform init\nterraform apply\n</code></pre></p> </li> <li> <p>Deploy ArgoCD on EKS    Once the EKS cluster is ready, deploy ArgoCD using <code>kubectl</code>:    <pre><code>kubectl create namespace argocd\nkubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml\n</code></pre></p> </li> <li> <p>Access the ArgoCD UI    Forward the ArgoCD UI port to your local machine:    <pre><code>kubectl port-forward svc/argocd-server -n argocd 8080:443\n</code></pre>    Access the UI at <code>https://localhost:8080</code> and log in using the default admin credentials.</p> </li> </ol>"},{"location":"projects/argocd/#prerequisites","title":"Prerequisites","text":"<p>Ensure the following prerequisites are met before deploying the infrastructure:</p> <ul> <li>AWS CLI: Installed and configured with credentials.</li> <li>Terraform: Version <code>&gt;= 1.6.1</code> installed.</li> <li>kubectl: Kubernetes CLI for managing EKS workloads.</li> <li>IAM Permissions: Permissions to create VPC, EKS, and related AWS resources.</li> </ul>"},{"location":"projects/argocd/#security-features","title":"Security Features","text":"<p>This deployment implements AWS best practices for security:</p> <ul> <li>VPC Isolation: Resources are provisioned in private and public subnets for enhanced security.</li> <li>IAM Roles and Policies: Follows the principle of least privilege for access management.</li> <li>Security Groups: Restricts traffic to only trusted IP ranges and services.</li> <li>Cluster Add-ons: Includes AWS EBS CSI driver for secure persistent storage.</li> <li>Admin Access: ArgoCD UI access is secured via Kubernetes RBAC and port forwarding.</li> </ul>"},{"location":"projects/argocd/#cost-analysis","title":"Cost Analysis","text":""},{"location":"projects/argocd/#upfront-costs","title":"Upfront Costs","text":"<ul> <li>Terraform State Management: Backend S3 bucket and DynamoDB table.</li> <li>VPC and NAT Gateway: Initial provisioning costs for network resources.</li> <li>EKS Control Plane: Standard AWS EKS control plane fees.</li> </ul>"},{"location":"projects/argocd/#ongoing-costs","title":"Ongoing Costs","text":"Service Cost Basis EKS Control Plane Fixed hourly fee for the Kubernetes control plane. NAT Gateway Pay-per-GB for outbound traffic. EKS Worker Nodes Costs based on the EC2 instances (t3.medium). Elastic Block Storage Costs for EBS volumes provisioned for workloads."},{"location":"projects/argocd/#next-steps","title":"Next Steps","text":"<p>To Be Improved</p> <ul> <li> Integrate ArgoCD with GitHub for automated sync.</li> <li> Deploy Ingress Controller for external access to workloads.</li> <li> Configure OIDC Authentication for ArgoCD UI.</li> <li> Implement Monitoring with Prometheus and Grafana.</li> <li> Enable auto-scaling for the EKS worker nodes.</li> </ul>"},{"location":"projects/argocd/#contact","title":"Contact","text":"<p>Questions or Suggestions?</p> <p>If you have any feedback, suggestions, or queries regarding this deployment, feel free to reach out. I'm always happy to share insights and learn more!</p>"},{"location":"projects/atlantis/","title":"Atlantis","text":"<p>What's Atlantis?</p> <p>Atlantis is an infrastructure automation tool for managing Terraform pull requests. This document outlines the architecture, AWS services used, and deployment details of Atlantis configured with ECS Fargate and Terraform. Atlantis automates the Terraform workflow by integrating with GitHub, providing a secure and scalable deployment. Read more..</p> <p>Why Implement Atlantis?</p> <p>I implemented a minimalistic version of Atlantis to showcase my proficiency in Terraform, AWS ECS, networking, and automation. This project demonstrates the ability to orchestrate infrastructure as code, deploy scalable containerized applications, and create secure and efficient cloud networks.</p> <p>While there is already a ready-to-go Terraform module available for Atlantis for AWS Fargate, I chose to develop my own module to gain deeper control and understanding of the services. This approach allows me to customize configurations, troubleshoot effectively, and enhance my expertise in cloud service orchestration.</p>"},{"location":"projects/atlantis/#features","title":"Features","text":"Why use Atlantis? <ul> <li> Infrastructure Automation   Automatically plans and applies Terraform changes via GitHub pull requests.</li> <li> Serverless Deployment   Utilizes AWS ECS Fargate for containerized deployments without server management.</li> <li> <p> Highly Available   Built with AWS services ensuring fault tolerance and scalability.</p> </li> <li> <p> GitHub Integration   Supports pull request workflows for Terraform, enabling collaboration and version control.</p> </li> <li> <p> Serverless Architecture   Runs as a containerized service on AWS ECS Fargate, reducing operational overhead.</p> </li> <li> <p> Secure Secrets Management   Integrates with AWS Secrets Manager for securely storing sensitive credentials.</p> </li> <li> <p> Scalable Design   Leverages AWS Application Load Balancer and Fargate to handle varying loads dynamically.</p> </li> <li> <p> Simplified Networking   Configured with VPC, subnets, and security groups to ensure secure communication.</p> </li> </ul>"},{"location":"projects/atlantis/#atlantis-walkthrough","title":"Atlantis Walkthrough","text":""},{"location":"projects/atlantis/#atlantis-demo-on-my-personal-repos","title":"Atlantis Demo on My Personal Repos","text":"<p>To see a simple demo showcasing how Atlantis works in real life, visit the following pull request on my personal repository: Atlantis Demo Pull Request</p>"},{"location":"projects/atlantis/#atlantis-admin-ui","title":"Atlantis Admin UI","text":"<p>Alternatively, Admin/SRE team can manage all the PRs via Atlantis UI secured via web authentication </p>"},{"location":"projects/atlantis/#architecture","title":"Architecture","text":"<p>Serverless Architecture</p> <p>Atlantis runs on a serverless architecture powered by AWS ECS Fargate, with a well-architected VPC setup for security and and Load Balancer for high availability.</p> <p>Architecture Diagram</p> <p>Coming soon..</p>"},{"location":"projects/atlantis/#aws-services-used","title":"AWS Services Used","text":"Service Purpose AWS VPC Isolates resources within a secure network. AWS Subnets Divides the network for better resource allocation. AWS ECS Fargate Runs containerized applications without servers. AWS Secrets Manager Securely stores environment variables. AWS Application Load Balancer Distributes traffic to ECS tasks. AWS Security Groups Controls inbound/outbound traffic. AWS IAM Roles Provides granular permissions for resources."},{"location":"projects/atlantis/#deployment","title":"Deployment","text":"<p>Atlantis is deployed on AWS ECS Fargate with the following key components:</p> <ul> <li>Task Definition: Configured with container settings, environment variables, and secrets.</li> <li>ECS Service: Manages container instances and integrates with the load balancer.</li> <li>Terraform: Automates the provisioning of all resources.</li> </ul>"},{"location":"projects/atlantis/#deployment-workflow","title":"Deployment Workflow","text":"<ol> <li> <p>Clone the Atlantis Repository    Clone the repository containing the Terraform files for Atlantis: <pre><code>git clone https://github.com/tapanpatel11/terraform/atlantis.git\n</code></pre></p> </li> <li> <p>Provision the Network Infrastructure    Navigate to the <code>network</code> folder and apply the Terraform configuration to set up the necessary VPC, subnets, and other network resources: <pre><code>cd atlantis/network\nterraform apply\n</code></pre></p> </li> <li> <p>Provision the ECS Services    Navigate to the <code>ecs</code> folder and apply the Terraform configuration to deploy Atlantis on ECS: <pre><code>cd ../ecs\nterraform apply\n</code></pre></p> </li> </ol>"},{"location":"projects/atlantis/#prerequisites","title":"Prerequisites","text":"<p>Before applying the configurations, ensure the following prerequisites are met:  </p> <ul> <li> <p>IAM Role for ECS   An IAM role is required to allow ECS tasks to interact with AWS services.  </p> </li> <li> <p>IAM User for Atlantis   Create an IAM user with permissions to use the Atlantis application.  </p> </li> <li> <p>Secrets in AWS Secrets Manager   The following secrets must be configured in AWS Secrets Manager for Atlantis to run:  </p> </li> <li> <p><code>ATLANTIS_GH_TOKEN</code></p> </li> <li><code>ATLANTIS_GH_USER</code></li> <li><code>ATLANTIS_GH_WEBHOOK_SECRET</code></li> <li><code>ATLANTIS_REPO_ALLOWLIST</code></li> <li><code>AWS_ACCESS_KEY_ID</code></li> <li><code>AWS_DEFAULT_REGION</code></li> <li><code>AWS_SECRET_ACCESS_KEY</code></li> </ul> <p>Refer to the official Atlantis documentation for detailed instructions on generating a GitHub token and setting up the webhook.</p>"},{"location":"projects/atlantis/#security-features","title":"Security Features","text":"<p>Atlantis ensures robust security using AWS best practices:</p> <ul> <li>VPC Isolation: Ensures resources are private and secure.</li> <li>Security Groups: Restricts inbound/outbound traffic to only github webhook IP CIDRs.</li> <li>Secrets Management: Uses AWS Secrets Manager to handle sensitive data securely.</li> <li>IAM Roles and Policies: Adheres to the principle of least privilege.</li> <li>Encrypted Communication: Utilizes HTTPS for secure data transmission.</li> </ul> <p>To be included</p> <ul> <li> Change the default port of atlantis</li> <li> Add Atlantis UI web authentication</li> <li> Restrict atlantis commands (apply, plan) to specific teams/members</li> <li> Allow apply only when review requirements are met</li> <li> Close public UI access and access it via VPN (such as Twingate)</li> <li> change the default mount volume of atlantis</li> </ul>"},{"location":"projects/atlantis/#cost-analysis","title":"Cost Analysis","text":""},{"location":"projects/atlantis/#upfront-costs","title":"Upfront Costs","text":"<ul> <li>Terraform Setup: Provisioning AWS resources via Terraform incurs initial resource costs.</li> <li>Docker Image: Building and storing the Atlantis Docker image.</li> </ul>"},{"location":"projects/atlantis/#ongoing-costs","title":"Ongoing Costs","text":"Service Cost Basis ECS Fargate Pay-as-you-go for vCPU and memory. Application Load Balancer Based on traffic handled by the ALB. Secrets Manager Based on the number of secrets stored. Terraform State Storage Using S3 and dynamoDB for backend state management."},{"location":"projects/atlantis/#contact","title":"Contact","text":"<p>Any doubts?</p> <p>Feel free to reach out if you have any suggestions, doubt's or wish to know more! Thanks!</p>"},{"location":"projects/ios/arbusinesscard/","title":"AR Business Card: Your Business in Augmented Reality","text":""},{"location":"projects/ios/arbusinesscard/#project-overview","title":"Project Overview","text":"<p>How it started?</p> <p>While exploring and experimenting with iOS development, I created a sample app called AR Business Card.  </p> <p>My vision was to create a live business card that could be experienced in augmented reality. The project utilized Apple\u2019s ARKit image recognition to display interactive AR elements. By touching specific AR objects (e.g., a LinkedIn icon), the app would display relevant information like my LinkedIn profile URL.</p>"},{"location":"projects/ios/arbusinesscard/#learning-experience","title":"Learning Experience","text":"<p>What I learned?</p> <p>The journey of building AR Business Card was a significant learning experience. It taught me a lot about:  </p> <ul> <li> Leveraging ARKit\u2019s image recognition to create responsive AR elements.  </li> <li> Developing touch interactions within an AR environment.  </li> <li> Building an innovative way to share professional information in a visually compelling manner.  </li> </ul> <p>This project also allowed me to explore the potential of iOS AR technology for practical and professional use cases.</p>"},{"location":"projects/ios/arbusinesscard/#final-result","title":"Final Result","text":"<p>Live Action</p> <p>Here\u2019s a glimpse of the final result:  </p> <p> </p>"},{"location":"projects/ios/arbusinesscard/#challenges-and-future-goals","title":"Challenges and Future Goals","text":"<p>Future additions</p> <p>I wanted to add more features like enhanced interactivity and support for multiple AR business card templates. However, due to the demands of my professional journey, I couldn't continue developing this project.  </p> <p>Despite that, AR Business Card remains a fascinating experiment and a creative use of AR technology for professional purposes.</p>"},{"location":"projects/ios/arbusinesscard/#repository","title":"Repository","text":"<p>You can explore the project on GitHub: GitHub - AR Business Card</p>"},{"location":"projects/ios/arbusinesscard/#highlights","title":"Highlights","text":"<ul> <li> Experimented with ARKit\u2019s image recognition for AR-based professional tools.  </li> <li> Designed a touch-based interaction system for AR elements.  </li> <li> Developed an innovative use case for sharing personal and professional details.  </li> </ul> <p>This project showcases how AR technology can transform traditional concepts like business cards into immersive and interactive experiences.</p>"},{"location":"projects/ios/ludoar/","title":"Ludo AR: Bringing the Classic Game to Augmented Reality","text":""},{"location":"projects/ios/ludoar/#project-overview","title":"Project Overview","text":"<p>How it started?</p> <p>While exploring and learning iOS development, I created a sample and experimental iOS app called Ludo AR. The app leverages Apple\u2019s ARKit to bring the classic LUDO board game into the augmented reality world.  </p> <p>This project was my attempt to recreate the beloved LUDO game in AR, combining my passion for iOS development and my curiosity about augmented reality technologies.</p>"},{"location":"projects/ios/ludoar/#learning-experience","title":"Learning Experience","text":"<p>What I learned?</p> <p>The journey of building Ludo AR was both challenging and rewarding. It taught me a great deal about:  </p> <ul> <li> Swift programming and the inner workings of ARKit.  </li> <li> The fundamentals of 3D modeling, including rigging and animating models.  </li> </ul> <p>Despite having zero prior experience with 3D modeling, I took on the strenuous task of using, rigging, and animating 3D assets to make the game come alive. This added a whole new dimension to my understanding of iOS app development and AR-based applications.</p>"},{"location":"projects/ios/ludoar/#final-result","title":"Final Result","text":"<p>Live Action</p> <p>Here\u2019s a glimpse of the final result:  </p> <p> </p>"},{"location":"projects/ios/ludoar/#challenges-and-future-goals","title":"Challenges and Future Goals","text":"<p>Future additions</p> <p>Though I wanted to add more features and develop Ludo AR into a full-fledged app, I couldn\u2019t find the time to continue the project after starting my professional journey. Nevertheless, this project remains one of my favorite hobbies and a proud milestone in my iOS development journey.</p>"},{"location":"projects/ios/ludoar/#repository","title":"Repository","text":"<p>You can explore the project on GitHub: GitHub - Ludo AR</p>"},{"location":"projects/ios/ludoar/#highlights","title":"Highlights","text":"<ul> <li> Experimented with ARKit to create an immersive gaming experience.  </li> <li> Gained hands-on experience with 3D modeling tools and workflows.  </li> <li> Strengthened my knowledge of Swift and the iOS ecosystem.  </li> </ul> <p>This project represents my creative endeavors during my early iOS development journey and continues to inspire me to explore new horizons.</p>"},{"location":"projects/ios/overview/","title":"iOS App Development Journey","text":"<p>Early Inspiration</p> <p>During my bachelor\u2019s studies, as a passionate Apple fanboy, I was deeply fascinated by iOS app development, especially in the Augmented Reality (AR) sector. At the time, AR was trending and offered some of the coolest innovations in technology. I took the initiative to self-learn iOS development by following free tutorials on YouTube, particularly those provided by Stanford University.  </p> <p>Exploring AR APIs and bringing my ideas to life became a thrilling experience. I loved experimenting with creative applications of AR technology, pushing the boundaries of what could be achieved with iOS development tools.</p>"},{"location":"projects/ios/overview/#jailbreaking-interest","title":"Jailbreaking Interest","text":"<p>My passion for iOS extended beyond development into the realm of jailbreaking. Even as a high school student, I was driven to unlock the full potential of iOS devices. </p> <p>How it all started?</p> <p>The argument from Android users that iOS devices lacked customization always motivated me to explore more.</p> <p>Till Now</p> <ul> <li> I became an active member of the r/jailbreak Reddit community.  </li> <li> I stayed up-to-date with jailbreak trends, news, and developments.  </li> <li> I experimented with countless tweaks that enabled features unimaginable for a standard iOS user, even ones that could surprise Android enthusiasts.  </li> <li> Example: Running multiple iOS app windows simultaneously.</li> </ul> <p>Here\u2019s a small demonstration of one such tweak showcasing its capability: </p>"},{"location":"projects/ios/overview/#developing-jailbreak-tweaks","title":"Developing Jailbreak Tweaks","text":"<p>Do it yourself!</p> <p>I didn\u2019t stop at using existing tweaks. I tried developing my own jailbreak apps and tweaks, which helped me:  </p> <ul> <li> Understand iOS vulnerabilities and security loopholes.  </li> <li> Keep pace with the constantly evolving security landscape of iOS.  </li> </ul>"},{"location":"projects/ios/overview/#professional-shift-to-devops","title":"Professional Shift to DevOps","text":"<p>Keep Moving Forward</p> <p>While my professional journey led me to become a DevOps Engineer, my curiosity and interest in iOS apps and their possibilities in the AR sector still remain alive. The experience I gained in self-learning, exploring, and building within the iOS ecosystem continues to inspire me to this day.</p>"},{"location":"projects/terraform/modules/backend/","title":"AWS Backend","text":"<p>What's this?</p> <p>This module simplifies the creation and management of an S3 backend for storing Terraform state files. It also includes DynamoDB table setup for state locking, ensuring safe and reliable operations in team environments.</p>"},{"location":"projects/terraform/modules/backend/#features","title":"Features","text":"Why use this? <ul> <li> Creation of an S3 bucket with object locking enabled for state file storage.</li> <li> Integration with DynamoDB for Terraform state locking.</li> <li> Server-side encryption using KMS for added security.</li> <li> Automatic versioning of state files.</li> <li> Parameterized configuration for customization.</li> </ul>"},{"location":"projects/terraform/modules/backend/#requirements","title":"Requirements","text":"Pre-requisites <ul> <li> Terraform version: &gt;= 1.6.1</li> <li> AWS Provider: &gt;= 5.8.0</li> <li> AWS IAM permissions to create S3, DynamoDB, and KMS resources.</li> </ul>"},{"location":"projects/terraform/modules/backend/#inputs","title":"Inputs","text":"Backend Configuration Name Description Type Default <code>s3_bucket_name</code> Name of the S3 bucket for storing Terraform state. string N/A <code>dynamodb_name</code> Name of the DynamoDB table for state locking. string N/A <code>environment</code> Deployment environment (e.g., dev, prod). string <code>dev</code> <code>app_name</code> Name of the application. string N/A"},{"location":"projects/terraform/modules/backend/#outputs","title":"Outputs","text":"Outputs Name Description <code>s3_bucket_id</code> ID of the created S3 bucket. <code>dynamodb_table_name</code> Name of the DynamoDB table used for state locking. <code>kms_key_arn</code> ARN of the KMS key used for encryption. <code>s3_bucket_arn</code> ARN of the S3 bucket."},{"location":"projects/terraform/modules/backend/#usage","title":"Usage","text":"<pre><code>module \"terraform_backend\" {\n  source = \"./path-to-this-module\"\n\n  app_name        = \"my-app\"\n  s3_bucket_name  = \"state-bucket\"\n  dynamodb_name   = \"state-lock\"\n  environment     = \"production\"\n}\n</code></pre>"},{"location":"projects/terraform/modules/backend/#resources-created","title":"Resources Created","text":"<ul> <li>S3 bucket with object locking and versioning enabled.</li> <li>DynamoDB table for state locking with a primary key (<code>LockID</code>).</li> <li>KMS key for server-side encryption of the S3 bucket.</li> </ul>"},{"location":"projects/terraform/modules/backend/#contact","title":"Contact","text":"<p>Any doubts?</p> <p>Feel free to reach out if you have any suggestions, doubts, or wish to know more! Thanks!</p>"},{"location":"projects/terraform/modules/vpc/","title":"AWS VPC","text":"<p>What's this?</p> <p>This module provides a way to create and manage an AWS Virtual Private Cloud (VPC) and its associated resources using Terraform. The module is highly configurable, allowing you to define parameters like subnet configuration, NAT Gateway deployment, tagging, and more.</p>"},{"location":"projects/terraform/modules/vpc/#features","title":"Features","text":"Why use this? <ul> <li> Creation of a VPC with configurable CIDR block, DNS support, and DNS hostnames.</li> <li> Public and private subnets with configurable counts and sizes.</li> <li> Optional NAT Gateway deployment.</li> <li> Automatic tagging of resources.</li> <li> Internet Gateway and route tables for public and private subnets.</li> </ul>"},{"location":"projects/terraform/modules/vpc/#requirements","title":"Requirements","text":"Pre-requisites <ul> <li> Terraform version: &gt;= 1.6.1</li> <li> AWS Provider: &gt;= 5.8.0</li> </ul>"},{"location":"projects/terraform/modules/vpc/#inputs","title":"Inputs","text":"VPC Configuration Name Description Type Default <code>region</code> Target AWS region. string <code>us-east-1</code> <code>cidr_block</code> The IPv4 CIDR block for the VPC. string <code>10.1.0.0/16</code> <code>enable_dns_support</code> Enable/disable DNS support in the VPC. bool <code>true</code> <code>enable_dns_hostnames</code> Enable/disable DNS hostnames in the VPC. bool <code>false</code> Subnet Configuration Name Description Type Default <code>public_subnet_count</code> Number of public subnets. number <code>3</code> <code>public_subnet_additional_bits</code> Additional bits for public subnet prefix. number <code>4</code> <code>private_subnet_count</code> Number of private subnets. number <code>3</code> <code>private_subnet_additional_bits</code> Additional bits for private subnet prefix. number <code>4</code> Tagging Name Description Type Default <code>global_tags</code> Global tags applied to all resources. map(string) <code>{ManagedBy = \"Terraform\", Environment = \"dev\"}</code> <code>default_tags</code> Tags to add to all resources. map(string) <code>{}</code> <code>public_subnet_tags</code> Tags to add to public subnets. map(string) <code>{Tier:Public}</code> <code>private_subnet_tags</code> Tags to add to private subnets. map(string) <code>{Tier:Private}</code> NAT Gateway Name Description Type Default <code>nat_gateway</code> Flag to deploy a NAT Gateway. bool <code>false</code> AWS Account Name Description Type Default <code>aws_account_number</code> AWS account number used for deployment. number N/A"},{"location":"projects/terraform/modules/vpc/#outputs","title":"Outputs","text":"Outputs Name Description <code>vpc_id</code> The ID of the created VPC. <code>public_subnets</code> List of IDs of the public subnets. <code>private_subnets</code> List of IDs of the private subnets. <code>aws_internet_gateway</code> Details of the Internet Gateway. <code>aws_route_table_public</code> The ID of the public route table. <code>aws_route_table_private</code> The ID of the private route table. <code>nat_gateway_ipv4_address</code> Public IP address of the NAT Gateway."},{"location":"projects/terraform/modules/vpc/#usage","title":"Usage","text":"<pre><code>module \"vpc\" {\n  source = \"./path-to-this-module\"\n\n  region                   = \"us-west-2\"\n  aws_account_number       = 123456789012\n  vpc_name                 = \"my-vpc\"\n  cidr_block               = \"10.0.0.0/16\"\n  enable_dns_support       = true\n  enable_dns_hostnames     = true\n\n  public_subnet_count      = 2\n  private_subnet_count     = 2\n\n  nat_gateway              = true\n\n  global_tags = {\n    Project     = \"my-project\"\n    Environment = \"production\"\n  }\n}\n</code></pre>"},{"location":"projects/terraform/modules/vpc/#resources-created","title":"Resources Created","text":"<ul> <li>VPC</li> <li>Subnets (public and private)</li> <li>Internet Gateway</li> <li>NAT Gateway (optional)</li> <li>Elastic IP for NAT Gateway</li> <li>Route tables (public and private) and route associations</li> <li>Default security group</li> </ul>"},{"location":"projects/terraform/modules/vpc/#contact","title":"Contact","text":"<p>Any doubts?</p> <p>Feel free to reach out if you have any suggestions, doubt's or wish to know more! Thanks!</p>"}]}